using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace EchoServer
{
    class Program
    {
        static void Main(string[] args)
        {
            IPAddress localAddr = IPAddress.Parse("127.0.0.1");
            int port = 13000;

            // 서버 소켓 생성 (TCP 사용)
            Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            try
            {
                // 로컬 엔드포인트 설정 (IP와 포트)
                IPEndPoint localEndPoint = new IPEndPoint(localAddr, port);

                // 소켓을 해당 엔드포인트에 바인딩
                serverSocket.Bind(localEndPoint);

                // 최대 10개의 클라이언트를 대기할 수 있도록 설정
                serverSocket.Listen(10);

                Console.WriteLine("퀴즈 서버가 시작되었습니다. 클라이언트를 기다리고 있습니다...");

                while (true)
                {
                    // 클라이언트의 연결을 기다림 (Blocking)
                    Socket clientSocket = serverSocket.Accept();
                    Console.WriteLine("클라이언트 접속 완료!: {0}", clientSocket.RemoteEndPoint.ToString());

                    // 퀴즈 문제 배열
                    string[] questions = {
                        "문제 1: C#의 창시자는?\n1. Anders Hejlsberg\n2. James Gosling\n3. Bjarne Stroustrup\n정답을 입력하세요 (1, 2, 3): ",
                        "문제 2: HTTP의 기본 포트 번호는?\n1. 21\n2. 80\n3. 443\n정답을 입력하세요 (1, 2, 3): ",
                        "문제 3: OOP에서 상속을 제공하는 키워드는?\n1. class\n2. interface\n3. extends\n정답을 입력하세요 (1, 2, 3): "
                    };

                    // 정답 배열
                    int[] answers = { 1, 2, 3 };
                    int score = 0;

                    for (int i = 0; i < questions.Length; i++)
                    {
                        // 클라이언트로 문제 전송
                        byte[] questionBytes = Encoding.Default.GetBytes(questions[i]);
                        clientSocket.Send(questionBytes);

                        // 클라이언트의 응답 수신
                        byte[] buffer = new byte[256];
                        int receivedBytes = clientSocket.Receive(buffer);
                        string clientAnswer = Encoding.Default.GetString(buffer, 0, receivedBytes).Trim();

                        // 정답 확인
                        if (int.TryParse(clientAnswer, out int answer) && answer == answers[i])
                        {
                            string correctMessage = "정답입니다!\n";
                            byte[] correctBytes = Encoding.Default.GetBytes(correctMessage);
                            clientSocket.Send(correctBytes);
                            score++;
                        }
                        else
                        {
                            string incorrectMessage = "오답입니다!\n";
                            byte[] incorrectBytes = Encoding.Default.GetBytes(incorrectMessage);
                            clientSocket.Send(incorrectBytes);
                        }
                    }

                    // 최종 결과 전송
                    string finalMessage;
                    if (score == questions.Length)
                    {
                        finalMessage = "축하합니다! 모든 문제를 맞추셨습니다. 우승하셨습니다!\n";
                    }
                    else
                    {
                        finalMessage = $"퀴즈가 끝났습니다. 총 {score}개 맞추셨습니다.\n";
                    }

                    byte[] finalMessageBytes = Encoding.Default.GetBytes(finalMessage);
                    clientSocket.Send(finalMessageBytes);
                    
                    // 종료 메시지 전송
                    string exitMessage = "연결을 종료합니다. 안녕히 가세요.";
                    byte[] exitMessageBytes = Encoding.Default.GetBytes(exitMessage);
                    clientSocket.Send(exitMessageBytes);

                    // 클라이언트 소켓 종료
                    clientSocket.Shutdown(SocketShutdown.Both);
                    clientSocket.Close();
                    Console.WriteLine("클라이언트 연결 종료됨.");
                }
            }
            catch (SocketException e)
            {
                Console.WriteLine("소켓 예외 발생: {0}", e.Message);
            }
            finally
            {
                // 서버 소켓 종료
                if (serverSocket != null)
                {
                    serverSocket.Close();
                }
                Console.WriteLine("서버를 종료합니다.");
            }
        }
    }
}
